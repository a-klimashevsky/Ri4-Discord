/**
* EVE Swagger Interface
* An OpenAPI for EVE Online
*
* The version of the OpenAPI document: 1.7.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package tv.z85.esi.models


import com.squareup.moshi.Json
/**
 * 200 ok object
 * @param activityId Job activity ID
 * @param blueprintId blueprint_id integer
 * @param blueprintLocationId Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility
 * @param blueprintTypeId blueprint_type_id integer
 * @param completedCharacterId ID of the character which completed this job
 * @param completedDate Date and time when this job was completed
 * @param cost The sume of job installation fee and industry facility tax
 * @param duration Job duration in seconds
 * @param endDate Date and time when this job finished
 * @param facilityId ID of the facility where this job is running
 * @param installerId ID of the character which installed this job
 * @param jobId Unique job ID
 * @param licensedRuns Number of runs blueprint is licensed for
 * @param outputLocationId Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility
 * @param pauseDate Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)
 * @param probability Chance of success for invention
 * @param productTypeId Type ID of product (manufactured, copied or invented)
 * @param runs Number of runs for a manufacturing job, or number of copies to make for a blueprint copy
 * @param startDate Date and time when this job started
 * @param stationId ID of the station where industry facility is located
 * @param status status string
 * @param successfulRuns Number of successful runs for this job. Equal to runs unless this is an invention job
 */

data class GetCharactersCharacterIdIndustryJobs200Ok (
    /* Job activity ID */
    @Json(name = "activity_id")
    var activityId: kotlin.Int,
    /* blueprint_id integer */
    @Json(name = "blueprint_id")
    var blueprintId: kotlin.Long,
    /* Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility */
    @Json(name = "blueprint_location_id")
    var blueprintLocationId: kotlin.Long,
    /* blueprint_type_id integer */
    @Json(name = "blueprint_type_id")
    var blueprintTypeId: kotlin.Int,
    /* ID of the character which completed this job */
    @Json(name = "completed_character_id")
    var completedCharacterId: kotlin.Int? = null,
    /* Date and time when this job was completed */
    @Json(name = "completed_date")
    var completedDate: java.time.OffsetDateTime? = null,
    /* The sume of job installation fee and industry facility tax */
    @Json(name = "cost")
    var cost: kotlin.Double? = null,
    /* Job duration in seconds */
    @Json(name = "duration")
    var duration: kotlin.Int,
    /* Date and time when this job finished */
    @Json(name = "end_date")
    var endDate: java.time.OffsetDateTime,
    /* ID of the facility where this job is running */
    @Json(name = "facility_id")
    var facilityId: kotlin.Long,
    /* ID of the character which installed this job */
    @Json(name = "installer_id")
    var installerId: kotlin.Int,
    /* Unique job ID */
    @Json(name = "job_id")
    var jobId: kotlin.Int,
    /* Number of runs blueprint is licensed for */
    @Json(name = "licensed_runs")
    var licensedRuns: kotlin.Int? = null,
    /* Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility */
    @Json(name = "output_location_id")
    var outputLocationId: kotlin.Long,
    /* Date and time when this job was paused (i.e. time when the facility where this job was installed went offline) */
    @Json(name = "pause_date")
    var pauseDate: java.time.OffsetDateTime? = null,
    /* Chance of success for invention */
    @Json(name = "probability")
    var probability: kotlin.Float? = null,
    /* Type ID of product (manufactured, copied or invented) */
    @Json(name = "product_type_id")
    var productTypeId: kotlin.Int? = null,
    /* Number of runs for a manufacturing job, or number of copies to make for a blueprint copy */
    @Json(name = "runs")
    var runs: kotlin.Int,
    /* Date and time when this job started */
    @Json(name = "start_date")
    var startDate: java.time.OffsetDateTime,
    /* ID of the station where industry facility is located */
    @Json(name = "station_id")
    var stationId: kotlin.Long,
    /* status string */
    @Json(name = "status")
    var status: GetCharactersCharacterIdIndustryJobs200Ok.Status,
    /* Number of successful runs for this job. Equal to runs unless this is an invention job */
    @Json(name = "successful_runs")
    var successfulRuns: kotlin.Int? = null
) {

    /**
    * status string
    * Values: active,cancelled,delivered,paused,ready,reverted
    */
    
    enum class Status(val value: kotlin.String){
        @Json(name = "active") active("active"),
        @Json(name = "cancelled") cancelled("cancelled"),
        @Json(name = "delivered") delivered("delivered"),
        @Json(name = "paused") paused("paused"),
        @Json(name = "ready") ready("ready"),
        @Json(name = "reverted") reverted("reverted");
    }
}


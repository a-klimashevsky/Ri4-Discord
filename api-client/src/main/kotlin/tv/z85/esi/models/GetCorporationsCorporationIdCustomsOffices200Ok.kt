/**
* EVE Swagger Interface
* An OpenAPI for EVE Online
*
* The version of the OpenAPI document: 1.7.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package tv.z85.esi.models


import com.squareup.moshi.Json
/**
 * 200 ok object
 * @param allianceTaxRate Only present if alliance access is allowed
 * @param allowAccessWithStandings standing_level and any standing related tax rate only present when this is true
 * @param allowAllianceAccess allow_alliance_access boolean
 * @param badStandingTaxRate bad_standing_tax_rate number
 * @param corporationTaxRate corporation_tax_rate number
 * @param excellentStandingTaxRate Tax rate for entities with excellent level of standing, only present if this level is allowed, same for all other standing related tax rates
 * @param goodStandingTaxRate good_standing_tax_rate number
 * @param neutralStandingTaxRate neutral_standing_tax_rate number
 * @param officeId unique ID of this customs office
 * @param reinforceExitEnd reinforce_exit_end integer
 * @param reinforceExitStart Together with reinforce_exit_end, marks a 2-hour period where this customs office could exit reinforcement mode during the day after initial attack
 * @param standingLevel Access is allowed only for entities with this level of standing or better
 * @param systemId ID of the solar system this customs office is located in
 * @param terribleStandingTaxRate terrible_standing_tax_rate number
 */

data class GetCorporationsCorporationIdCustomsOffices200Ok (
    /* Only present if alliance access is allowed */
    @Json(name = "alliance_tax_rate")
    var allianceTaxRate: kotlin.Float? = null,
    /* standing_level and any standing related tax rate only present when this is true */
    @Json(name = "allow_access_with_standings")
    var allowAccessWithStandings: kotlin.Boolean,
    /* allow_alliance_access boolean */
    @Json(name = "allow_alliance_access")
    var allowAllianceAccess: kotlin.Boolean,
    /* bad_standing_tax_rate number */
    @Json(name = "bad_standing_tax_rate")
    var badStandingTaxRate: kotlin.Float? = null,
    /* corporation_tax_rate number */
    @Json(name = "corporation_tax_rate")
    var corporationTaxRate: kotlin.Float? = null,
    /* Tax rate for entities with excellent level of standing, only present if this level is allowed, same for all other standing related tax rates */
    @Json(name = "excellent_standing_tax_rate")
    var excellentStandingTaxRate: kotlin.Float? = null,
    /* good_standing_tax_rate number */
    @Json(name = "good_standing_tax_rate")
    var goodStandingTaxRate: kotlin.Float? = null,
    /* neutral_standing_tax_rate number */
    @Json(name = "neutral_standing_tax_rate")
    var neutralStandingTaxRate: kotlin.Float? = null,
    /* unique ID of this customs office */
    @Json(name = "office_id")
    var officeId: kotlin.Long,
    /* reinforce_exit_end integer */
    @Json(name = "reinforce_exit_end")
    var reinforceExitEnd: kotlin.Int,
    /* Together with reinforce_exit_end, marks a 2-hour period where this customs office could exit reinforcement mode during the day after initial attack */
    @Json(name = "reinforce_exit_start")
    var reinforceExitStart: kotlin.Int,
    /* Access is allowed only for entities with this level of standing or better */
    @Json(name = "standing_level")
    var standingLevel: GetCorporationsCorporationIdCustomsOffices200Ok.StandingLevel? = null,
    /* ID of the solar system this customs office is located in */
    @Json(name = "system_id")
    var systemId: kotlin.Int,
    /* terrible_standing_tax_rate number */
    @Json(name = "terrible_standing_tax_rate")
    var terribleStandingTaxRate: kotlin.Float? = null
) {

    /**
    * Access is allowed only for entities with this level of standing or better
    * Values: bad,excellent,good,neutral,terrible
    */
    
    enum class StandingLevel(val value: kotlin.String){
        @Json(name = "bad") bad("bad"),
        @Json(name = "excellent") excellent("excellent"),
        @Json(name = "good") good("good"),
        @Json(name = "neutral") neutral("neutral"),
        @Json(name = "terrible") terrible("terrible");
    }
}


/**
* EVE Swagger Interface
* An OpenAPI for EVE Online
*
* The version of the OpenAPI document: 1.7.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package tv.z85.esi.models


import com.squareup.moshi.Json
/**
 * 200 ok object
 * @param acceptorId Who will accept the contract
 * @param assigneeId ID to whom the contract is assigned, can be corporation or character ID
 * @param availability To whom the contract is available
 * @param buyout Buyout price (for Auctions only)
 * @param collateral Collateral price (for Couriers only)
 * @param contractId contract_id integer
 * @param dateAccepted Date of confirmation of contract
 * @param dateCompleted Date of completed of contract
 * @param dateExpired Expiration date of the contract
 * @param dateIssued Сreation date of the contract
 * @param daysToComplete Number of days to perform the contract
 * @param endLocationId End location ID (for Couriers contract)
 * @param forCorporation true if the contract was issued on behalf of the issuer's corporation
 * @param issuerCorporationId Character's corporation ID for the issuer
 * @param issuerId Character ID for the issuer
 * @param price Price of contract (for ItemsExchange and Auctions)
 * @param reward Remuneration for contract (for Couriers only)
 * @param startLocationId Start location ID (for Couriers contract)
 * @param status Status of the the contract
 * @param title Title of the contract
 * @param type Type of the contract
 * @param volume Volume of items in the contract
 */

data class GetCharactersCharacterIdContracts200Ok (
    /* Who will accept the contract */
    @Json(name = "acceptor_id")
    var acceptorId: kotlin.Int,
    /* ID to whom the contract is assigned, can be corporation or character ID */
    @Json(name = "assignee_id")
    var assigneeId: kotlin.Int,
    /* To whom the contract is available */
    @Json(name = "availability")
    var availability: GetCharactersCharacterIdContracts200Ok.Availability,
    /* Buyout price (for Auctions only) */
    @Json(name = "buyout")
    var buyout: kotlin.Double? = null,
    /* Collateral price (for Couriers only) */
    @Json(name = "collateral")
    var collateral: kotlin.Double? = null,
    /* contract_id integer */
    @Json(name = "contract_id")
    var contractId: kotlin.Int,
    /* Date of confirmation of contract */
    @Json(name = "date_accepted")
    var dateAccepted: java.time.OffsetDateTime? = null,
    /* Date of completed of contract */
    @Json(name = "date_completed")
    var dateCompleted: java.time.OffsetDateTime? = null,
    /* Expiration date of the contract */
    @Json(name = "date_expired")
    var dateExpired: java.time.OffsetDateTime,
    /* Сreation date of the contract */
    @Json(name = "date_issued")
    var dateIssued: java.time.OffsetDateTime,
    /* Number of days to perform the contract */
    @Json(name = "days_to_complete")
    var daysToComplete: kotlin.Int? = null,
    /* End location ID (for Couriers contract) */
    @Json(name = "end_location_id")
    var endLocationId: kotlin.Long? = null,
    /* true if the contract was issued on behalf of the issuer's corporation */
    @Json(name = "for_corporation")
    var forCorporation: kotlin.Boolean,
    /* Character's corporation ID for the issuer */
    @Json(name = "issuer_corporation_id")
    var issuerCorporationId: kotlin.Int,
    /* Character ID for the issuer */
    @Json(name = "issuer_id")
    var issuerId: kotlin.Int,
    /* Price of contract (for ItemsExchange and Auctions) */
    @Json(name = "price")
    var price: kotlin.Double? = null,
    /* Remuneration for contract (for Couriers only) */
    @Json(name = "reward")
    var reward: kotlin.Double? = null,
    /* Start location ID (for Couriers contract) */
    @Json(name = "start_location_id")
    var startLocationId: kotlin.Long? = null,
    /* Status of the the contract */
    @Json(name = "status")
    var status: GetCharactersCharacterIdContracts200Ok.Status,
    /* Title of the contract */
    @Json(name = "title")
    var title: kotlin.String? = null,
    /* Type of the contract */
    @Json(name = "type")
    var type: GetCharactersCharacterIdContracts200Ok.Type,
    /* Volume of items in the contract */
    @Json(name = "volume")
    var volume: kotlin.Double? = null
) {

    /**
    * To whom the contract is available
    * Values: public,personal,corporation,alliance
    */
    
    enum class Availability(val value: kotlin.String){
        @Json(name = "public") public("public"),
        @Json(name = "personal") personal("personal"),
        @Json(name = "corporation") corporation("corporation"),
        @Json(name = "alliance") alliance("alliance");
    }
    /**
    * Status of the the contract
    * Values: outstanding,inProgress,finishedIssuer,finishedContractor,finished,cancelled,rejected,failed,deleted,reversed
    */
    
    enum class Status(val value: kotlin.String){
        @Json(name = "outstanding") outstanding("outstanding"),
        @Json(name = "in_progress") inProgress("in_progress"),
        @Json(name = "finished_issuer") finishedIssuer("finished_issuer"),
        @Json(name = "finished_contractor") finishedContractor("finished_contractor"),
        @Json(name = "finished") finished("finished"),
        @Json(name = "cancelled") cancelled("cancelled"),
        @Json(name = "rejected") rejected("rejected"),
        @Json(name = "failed") failed("failed"),
        @Json(name = "deleted") deleted("deleted"),
        @Json(name = "reversed") reversed("reversed");
    }
    /**
    * Type of the contract
    * Values: unknown,itemExchange,auction,courier,loan
    */
    
    enum class Type(val value: kotlin.String){
        @Json(name = "unknown") unknown("unknown"),
        @Json(name = "item_exchange") itemExchange("item_exchange"),
        @Json(name = "auction") auction("auction"),
        @Json(name = "courier") courier("courier"),
        @Json(name = "loan") loan("loan");
    }
}


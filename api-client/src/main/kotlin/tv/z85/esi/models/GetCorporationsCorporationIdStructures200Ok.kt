/**
* EVE Swagger Interface
* An OpenAPI for EVE Online
*
* The version of the OpenAPI document: 1.7.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package tv.z85.esi.models

import tv.z85.esi.models.GetCorporationsCorporationIdStructuresService

import com.squareup.moshi.Json
/**
 * 200 ok object
 * @param corporationId ID of the corporation that owns the structure
 * @param fuelExpires Date on which the structure will run out of fuel
 * @param nextReinforceApply The date and time when the structure's newly requested reinforcement times (e.g. next_reinforce_hour and next_reinforce_day) will take effect
 * @param nextReinforceHour The requested change to reinforce_hour that will take effect at the time shown by next_reinforce_apply
 * @param nextReinforceWeekday The requested change to reinforce_weekday that will take effect at the time shown by next_reinforce_apply
 * @param profileId The id of the ACL profile for this citadel
 * @param reinforceHour The hour of day that determines the four hour window when the structure will randomly exit its reinforcement periods and become vulnerable to attack against its armor and/or hull. The structure will become vulnerable at a random time that is +/- 2 hours centered on the value of this property
 * @param reinforceWeekday The day of the week when the structure exits its final reinforcement period and becomes vulnerable to attack against its hull. Monday is 0 and Sunday is 6
 * @param services Contains a list of service upgrades, and their state
 * @param state state string
 * @param stateTimerEnd Date at which the structure will move to it's next state
 * @param stateTimerStart Date at which the structure entered it's current state
 * @param structureId The Item ID of the structure
 * @param systemId The solar system the structure is in
 * @param typeId The type id of the structure
 * @param unanchorsAt Date at which the structure will unanchor
 */

data class GetCorporationsCorporationIdStructures200Ok (
    /* ID of the corporation that owns the structure */
    @Json(name = "corporation_id")
    var corporationId: kotlin.Int,
    /* Date on which the structure will run out of fuel */
    @Json(name = "fuel_expires")
    var fuelExpires: java.time.OffsetDateTime? = null,
    /* The date and time when the structure's newly requested reinforcement times (e.g. next_reinforce_hour and next_reinforce_day) will take effect */
    @Json(name = "next_reinforce_apply")
    var nextReinforceApply: java.time.OffsetDateTime? = null,
    /* The requested change to reinforce_hour that will take effect at the time shown by next_reinforce_apply */
    @Json(name = "next_reinforce_hour")
    var nextReinforceHour: kotlin.Int? = null,
    /* The requested change to reinforce_weekday that will take effect at the time shown by next_reinforce_apply */
    @Json(name = "next_reinforce_weekday")
    var nextReinforceWeekday: kotlin.Int? = null,
    /* The id of the ACL profile for this citadel */
    @Json(name = "profile_id")
    var profileId: kotlin.Int,
    /* The hour of day that determines the four hour window when the structure will randomly exit its reinforcement periods and become vulnerable to attack against its armor and/or hull. The structure will become vulnerable at a random time that is +/- 2 hours centered on the value of this property */
    @Json(name = "reinforce_hour")
    var reinforceHour: kotlin.Int,
    /* The day of the week when the structure exits its final reinforcement period and becomes vulnerable to attack against its hull. Monday is 0 and Sunday is 6 */
    @Json(name = "reinforce_weekday")
    var reinforceWeekday: kotlin.Int? = null,
    /* Contains a list of service upgrades, and their state */
    @Json(name = "services")
    var services: kotlin.Array<GetCorporationsCorporationIdStructuresService>? = null,
    /* state string */
    @Json(name = "state")
    var state: GetCorporationsCorporationIdStructures200Ok.State,
    /* Date at which the structure will move to it's next state */
    @Json(name = "state_timer_end")
    var stateTimerEnd: java.time.OffsetDateTime? = null,
    /* Date at which the structure entered it's current state */
    @Json(name = "state_timer_start")
    var stateTimerStart: java.time.OffsetDateTime? = null,
    /* The Item ID of the structure */
    @Json(name = "structure_id")
    var structureId: kotlin.Long,
    /* The solar system the structure is in */
    @Json(name = "system_id")
    var systemId: kotlin.Int,
    /* The type id of the structure */
    @Json(name = "type_id")
    var typeId: kotlin.Int,
    /* Date at which the structure will unanchor */
    @Json(name = "unanchors_at")
    var unanchorsAt: java.time.OffsetDateTime? = null
) {

    /**
    * state string
    * Values: anchorVulnerable,anchoring,armorReinforce,armorVulnerable,deployVulnerable,fittingInvulnerable,hullReinforce,hullVulnerable,onlineDeprecated,onliningVulnerable,shieldVulnerable,unanchored,unknown
    */
    
    enum class State(val value: kotlin.String){
        @Json(name = "anchor_vulnerable") anchorVulnerable("anchor_vulnerable"),
        @Json(name = "anchoring") anchoring("anchoring"),
        @Json(name = "armor_reinforce") armorReinforce("armor_reinforce"),
        @Json(name = "armor_vulnerable") armorVulnerable("armor_vulnerable"),
        @Json(name = "deploy_vulnerable") deployVulnerable("deploy_vulnerable"),
        @Json(name = "fitting_invulnerable") fittingInvulnerable("fitting_invulnerable"),
        @Json(name = "hull_reinforce") hullReinforce("hull_reinforce"),
        @Json(name = "hull_vulnerable") hullVulnerable("hull_vulnerable"),
        @Json(name = "online_deprecated") onlineDeprecated("online_deprecated"),
        @Json(name = "onlining_vulnerable") onliningVulnerable("onlining_vulnerable"),
        @Json(name = "shield_vulnerable") shieldVulnerable("shield_vulnerable"),
        @Json(name = "unanchored") unanchored("unanchored"),
        @Json(name = "unknown") unknown("unknown");
    }
}

